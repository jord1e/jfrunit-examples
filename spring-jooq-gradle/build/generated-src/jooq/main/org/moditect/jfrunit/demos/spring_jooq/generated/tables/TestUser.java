/*
 * This file is generated by jOOQ.
 */
package org.moditect.jfrunit.demos.spring_jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.moditect.jfrunit.demos.spring_jooq.generated.Keys;
import org.moditect.jfrunit.demos.spring_jooq.generated.Public;
import org.moditect.jfrunit.demos.spring_jooq.generated.tables.records.TestUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestUser extends TableImpl<TestUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_user</code>
     */
    public static final TestUser TEST_USER = new TestUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestUserRecord> getRecordType() {
        return TestUserRecord.class;
    }

    /**
     * The column <code>public.test_user.id</code>.
     */
    public final TableField<TestUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_user.username</code>.
     */
    public final TableField<TestUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_user.age</code>.
     */
    public final TableField<TestUserRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    private TestUser(Name alias, Table<TestUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestUser(Name alias, Table<TestUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.test_user</code> table reference
     */
    public TestUser(String alias) {
        this(DSL.name(alias), TEST_USER);
    }

    /**
     * Create an aliased <code>public.test_user</code> table reference
     */
    public TestUser(Name alias) {
        this(alias, TEST_USER);
    }

    /**
     * Create a <code>public.test_user</code> table reference
     */
    public TestUser() {
        this(DSL.name("test_user"), null);
    }

    public <O extends Record> TestUser(Table<O> child, ForeignKey<O, TestUserRecord> key) {
        super(child, key, TEST_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TestUserRecord, Long> getIdentity() {
        return (Identity<TestUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestUserRecord> getPrimaryKey() {
        return Keys.TEST_USER_PKEY;
    }

    @Override
    public List<UniqueKey<TestUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TestUserRecord>>asList(Keys.TEST_USER_PKEY);
    }

    @Override
    public TestUser as(String alias) {
        return new TestUser(DSL.name(alias), this);
    }

    @Override
    public TestUser as(Name alias) {
        return new TestUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestUser rename(String name) {
        return new TestUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestUser rename(Name name) {
        return new TestUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
